# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/sparql-client/all/sparql-client.rbi
#
# sparql-client-3.1.0
module SPARQL
end
class SPARQL::Client
  def ask(*args, **options); end
  def call_query_method(meth, *args, **options); end
  def clear(what, *arguments); end
  def clear_graph(graph_uri, **options); end
  def close; end
  def construct(*args, **options); end
  def delete_data(data, **options); end
  def delete_insert(delete_graph, insert_graph = nil, where_graph = nil, **options); end
  def describe(*args, **options); end
  def headers; end
  def http_klass(scheme); end
  def initialize(url, **options, &block); end
  def insert_data(data, **options); end
  def inspect!; end
  def inspect; end
  def make_get_request(query, headers = nil); end
  def make_post_request(query, headers = nil); end
  def nodes; end
  def options; end
  def parse_rdf_serialization(response, **options); end
  def parse_response(response, **options); end
  def query(query, **options); end
  def request(query, headers = nil, &block); end
  def request_method(query); end
  def response(query, **options); end
  def select(*args, **options); end
  def self.parse_csv_bindings(csv, nodes = nil); end
  def self.parse_json_bindings(json, nodes = nil); end
  def self.parse_json_value(value, nodes = nil); end
  def self.parse_tsv_bindings(tsv, nodes = nil); end
  def self.parse_xml_bindings(xml, nodes = nil); end
  def self.parse_xml_value(value, nodes = nil); end
  def self.serialize_patterns(patterns, use_vars = nil); end
  def self.serialize_predicate(value, rdepth = nil); end
  def self.serialize_uri(uri); end
  def self.serialize_value(value, use_vars = nil); end
  def set_url_default_graph(url); end
  def update(query, **options); end
  def url; end
end
class SPARQL::Client::ClientError < StandardError
end
class SPARQL::Client::MalformedQuery < SPARQL::Client::ClientError
end
class SPARQL::Client::ServerError < StandardError
end
class SPARQL::Client::QueryElement
  def elements; end
  def initialize(*args); end
  def to_s; end
end
