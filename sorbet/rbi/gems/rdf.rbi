# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/rdf/all/rdf.rbi
#
# rdf-3.1.1
module RDF
  def self.Graph(**options, &block); end
  def self.List(*args); end
  def self.Literal(literal, **options); end
  def self.Node(*args); end
  def self.Resource(*args); end
  def self.Statement(*args, **options); end
  def self.StrictVocabulary(prefix); end
  def self.URI(*args); end
  def self.Vocabulary(uri); end
  def self.[](property); end
  def self.const_missing(constant); end
  def self.enum_for(method = nil, *args); end
  def self.method_missing(property, *args, &block); end
  def self.respond_to?(method, include_all = nil); end
  def self.to_enum(method = nil, *args); end
end
module RDF::VERSION
  def self.to_a; end
  def self.to_s; end
  def self.to_str; end
end
module RDF::Queryable
  def enum_for(method = nil, *args); end
  def first(pattern = nil); end
  def first_literal(pattern = nil); end
  def first_object(pattern = nil); end
  def first_predicate(pattern = nil); end
  def first_subject(pattern = nil); end
  def first_value(pattern = nil); end
  def query(pattern, **options, &block); end
  def query_execute(query, **options, &block); end
  def query_pattern(pattern, **options, &block); end
  def to_enum(method = nil, *args); end
  include Enumerable
end
module RDF::Util
end
module RDF::Util::Aliasing
end
module RDF::Util::Aliasing::LateBound
  def alias_method(new_name, old_name); end
end
module RDF::Countable
  def count; end
  def empty?; end
  def enum_for(method = nil, *args); end
  def size(*args, &block); end
  def to_enum(*args, &block); end
  extend RDF::Util::Aliasing::LateBound
end
module RDF::Enumerable
  def dump(*args, **options); end
  def each_graph; end
  def each_object; end
  def each_predicate; end
  def each_quad; end
  def each_statement(&block); end
  def each_subject; end
  def each_term; end
  def each_triple; end
  def enum_for(method = nil, *args); end
  def enum_graph; end
  def enum_graphs(*args, &block); end
  def enum_object; end
  def enum_objects(*args, &block); end
  def enum_predicate; end
  def enum_predicates(*args, &block); end
  def enum_quad; end
  def enum_quads(*args, &block); end
  def enum_statement; end
  def enum_statements(*args, &block); end
  def enum_subject; end
  def enum_subjects(*args, &block); end
  def enum_term; end
  def enum_terms(*args, &block); end
  def enum_triple; end
  def enum_triples(*args, &block); end
  def graph_names(unique: nil); end
  def has_graph?(graph_name); end
  def has_object?(value); end
  def has_predicate?(value); end
  def has_quad?(quad); end
  def has_statement?(statement); end
  def has_subject?(value); end
  def has_term?(value); end
  def has_triple?(triple); end
  def include?(*args, &block); end
  def invalid?; end
  def method_missing(meth, *args); end
  def objects(unique: nil); end
  def predicates(unique: nil); end
  def project_graph(graph_name); end
  def quads(**options); end
  def respond_to_missing?(name, include_private = nil); end
  def statements(**options); end
  def subjects(unique: nil); end
  def supports?(feature); end
  def terms(unique: nil); end
  def to_a; end
  def to_enum(*args, &block); end
  def to_h; end
  def to_set; end
  def triples(**options); end
  def valid?; end
  def validate!; end
  def validate(*args, &block); end
  extend RDF::Util::Aliasing::LateBound
  include Enumerable
  include RDF::Countable
end
class RDF::Query
  def +(other); end
  def <<(pattern); end
  def apply_graph_name(graph_name = nil); end
  def compile_hash_patterns(hash_patterns); end
  def default?; end
  def dup; end
  def each(&block); end
  def each_solution(&block); end
  def each_statement(&block); end
  def empty?; end
  def execute(queryable, bindings: nil, solutions: nil, graph_name: nil, name: nil, **options, &block); end
  def failed?; end
  def graph_name; end
  def graph_name=(arg0); end
  def has_blank_nodes?; end
  def has_variables?; end
  def initialize(*patterns, solutions: nil, graph_name: nil, name: nil, validate: nil, **options, &block); end
  def matched?; end
  def named?; end
  def node?; end
  def optimize!(**options); end
  def optimize(**options); end
  def options; end
  def pattern(pattern, **options); end
  def patterns; end
  def self.Solutions(*args); end
  def self.execute(queryable, patterns = nil, options = nil, &block); end
  def solutions; end
  def unnamed?; end
  def valid?; end
  def validate!; end
  def variable?; end
  def variable_count; end
  def variables; end
  def variables?; end
  include RDF::Enumerable
end
class RDF::Query::Solutions < Array
  def bindings; end
  def count(&block); end
  def distinct!; end
  def distinct; end
  def dup; end
  def each_solution; end
  def filter!(criteria = nil); end
  def filter(criteria = nil); end
  def has_variables?(variables); end
  def have_variables?(variables); end
  def limit!(length); end
  def limit(length); end
  def merge(other); end
  def minus(other); end
  def offset!(start); end
  def offset(start); end
  def order(*variables); end
  def order_by(*variables); end
  def project(*variables); end
  def reduced!; end
  def reduced; end
  def select(*variables); end
  def variable_names; end
end
class RDF::Format
  def self.accept_type; end
  def self.accept_types; end
  def self.cli_commands; end
  def self.content_encoding(encoding = nil); end
  def self.content_type(type = nil, options = nil); end
  def self.content_types; end
  def self.detect(sample); end
  def self.each(file_name: nil, file_extension: nil, content_type: nil, has_reader: nil, has_writer: nil, sample: nil, all_if_none: nil, **options, &block); end
  def self.file_extension; end
  def self.file_extensions; end
  def self.for(*arg, &block); end
  def self.inherited(child); end
  def self.name; end
  def self.new(*arg0); end
  def self.reader(klass = nil, &block); end
  def self.reader_class(klass = nil, &block); end
  def self.reader_symbols; end
  def self.reader_types; end
  def self.require(library); end
  def self.symbols; end
  def self.to_sym; end
  def self.writer(klass = nil, &block); end
  def self.writer_class(klass = nil, &block); end
  def self.writer_symbols; end
  def self.writer_types; end
  extend Enumerable
end
class RDF::FormatError < IOError
end
module RDF::NTriples
  def self.escape(string); end
  def self.serialize(value); end
  def self.unescape(string); end
  def self.unserialize(data); end
end
class RDF::NTriples::Format < RDF::Format
  def self.detect(sample); end
  def self.name; end
end
module RDF::Value
  def anonymous?; end
  def canonicalize!; end
  def canonicalize; end
  def constant?; end
  def graph?; end
  def inspect!; end
  def inspect; end
  def invalid?; end
  def iri?; end
  def list?; end
  def literal?; end
  def node?; end
  def resource?; end
  def start_with?(string); end
  def starts_with?(string); end
  def statement?; end
  def term?; end
  def to_ntriples; end
  def to_rdf; end
  def to_term; end
  def type_error(message); end
  def uri?; end
  def valid?; end
  def validate!; end
  def validate; end
  def variable?; end
end
