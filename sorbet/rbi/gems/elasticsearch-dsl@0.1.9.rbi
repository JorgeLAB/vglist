# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `elasticsearch-dsl` gem.
# Please instead update this file by running `bin/tapioca sync`.

# typed: true

module Elasticsearch; end

module Elasticsearch::DSL
  include ::Elasticsearch::DSL::Search

  class << self
    def included(base); end
  end
end

module Elasticsearch::DSL::Search
  extend ::Elasticsearch::DSL::Search

  def search(*args, &block); end
end

class Elasticsearch::DSL::Search::Aggregation
  def initialize(*args, &block); end

  def aggregation(*args, &block); end
  def aggregations; end
  def call; end
  def method_missing(name, *args, &block); end
  def to_hash(options = T.unsafe(nil)); end
end

module Elasticsearch::DSL::Search::Aggregations; end

class Elasticsearch::DSL::Search::Aggregations::Avg
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Aggregations::AvgBucket
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def buckets_path(*args); end
  def format(*args); end
  def gap_policy(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Aggregations::BucketScript
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def buckets_path(*args); end
  def format(*args); end
  def gap_policy(*args); end
  def script(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Aggregations::BucketSelector
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def buckets_path(*args); end
  def gap_policy(*args); end
  def script(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Aggregations::BucketSort
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def from(*args); end
  def gap_policy(*args); end
  def size(*args); end
  def sort(*args, &block); end
  def to_hash; end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Aggregations::Cardinality
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def field(*args); end
  def params(*args); end
  def precision_threshold(*args); end
  def rehash(*args); end
  def script(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Aggregations::Children
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def type(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Aggregations::Composite
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def after(*args); end
  def size(*args); end
  def sources(*args); end
  def to_hash(_options = T.unsafe(nil)); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Aggregations::CumulativeSum
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def buckets_path(*args); end
  def format(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Aggregations::DateHistogram
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def extended_bounds(*args); end
  def field(*args); end
  def format(*args); end
  def interval(*args); end
  def min_doc_count(*args); end
  def order(*args); end
  def post_offset(*args); end
  def post_zone(*args); end
  def pre_offset(*args); end
  def pre_zone(*args); end
  def pre_zone_adjust_large_interval(*args); end
  def time_zone(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Aggregations::DateRange
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def field(*args); end
  def format(*args); end
  def ranges(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Aggregations::Derivative
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def buckets_path(*args); end
  def format(*args); end
  def gap_policy(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Aggregations::ExtendedStats
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Aggregations::ExtendedStatsBucket
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def buckets_path(*args); end
  def format(*args); end
  def gap_policy(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Aggregations::Filter
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Aggregations::Filters
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def filters(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Aggregations::GeoBounds
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def field(*args); end
  def wrap_longitude(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Aggregations::GeoDistance
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def distance_type(*args); end
  def field(*args); end
  def origin(*args); end
  def ranges(*args); end
  def unit(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Aggregations::GeohashGrid
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def field(*args); end
  def precision(*args); end
  def shard_size(*args); end
  def size(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Aggregations::Global
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Aggregations::Histogram
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def extended_bounds(*args); end
  def field(*args); end
  def interval(*args); end
  def keyed(*args); end
  def min_doc_count(*args); end
  def order(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Aggregations::IpRange
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def field(*args); end
  def ranges(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Aggregations::Max
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Aggregations::MaxBucket
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def buckets_path(*args); end
  def format(*args); end
  def gap_policy(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Aggregations::Min
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Aggregations::MinBucket
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def buckets_path(*args); end
  def format(*args); end
  def gap_policy(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Aggregations::Missing
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def field(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Aggregations::MovingAvg
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def buckets_path(*args); end
  def format(*args); end
  def gap_policy(*args); end
  def minimize(*args); end
  def model(*args); end
  def settings(*args); end
  def window(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Aggregations::Nested
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def path(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Aggregations::PercentileRanks
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def compression(*args); end
  def field(*args); end
  def params(*args); end
  def script(*args); end
  def values(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Aggregations::Percentiles
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def compression(*args); end
  def field(*args); end
  def params(*args); end
  def percents(*args); end
  def script(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Aggregations::PercentilesBucket
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def buckets_path(*args); end
  def format(*args); end
  def gap_policy(*args); end
  def percents(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Aggregations::Range
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def field(*args); end
  def key(key, value); end
  def keyed(*args); end
  def params(*args); end
  def script(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Aggregations::ReverseNested
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Aggregations::ScriptedMetric
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def combine_script(*args); end
  def init_script(*args); end
  def lang(*args); end
  def map_script(*args); end
  def params(*args); end
  def reduce_script(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Aggregations::SerialDiff
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def buckets_path(*args); end
  def format(*args); end
  def gap_policy(*args); end
  def lag(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Aggregations::SignificantTerms
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def background_filter(*args); end
  def chi_square(*args); end
  def exclude(*args); end
  def field(*args); end
  def gnd(*args); end
  def include(*args); end
  def min_doc_count(*args); end
  def mutual_information(*args); end
  def shard_min_doc_count(*args); end
  def shard_size(*args); end
  def size(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Aggregations::SignificantText
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def background_filter(*args); end
  def chi_square(*args); end
  def exclude(*args); end
  def field(*args); end
  def gnd(*args); end
  def include(*args); end
  def min_doc_count(*args); end
  def mutual_information(*args); end
  def shard_min_doc_count(*args); end
  def shard_size(*args); end
  def size(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Aggregations::Stats
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def field(*args); end
  def script(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Aggregations::StatsBucket
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def buckets_path(*args); end
  def format(*args); end
  def gap_policy(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Aggregations::Sum
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Aggregations::SumBucket
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def buckets_path(*args); end
  def format(*args); end
  def gap_policy(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Aggregations::Terms
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def exclude(*args); end
  def field(*args); end
  def include(*args); end
  def min_doc_count(*args); end
  def order(*args); end
  def script(*args); end
  def shard_min_doc_count(*args); end
  def shard_size(*args); end
  def size(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Aggregations::TopHits
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def from(*args); end
  def size(*args); end
  def sort(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Aggregations::ValueCount
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::AggregationsCollection < ::Hash
  def to_hash; end
end

module Elasticsearch::DSL::Search::BaseAggregationComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods

  class << self
    def included(base); end
  end
end

module Elasticsearch::DSL::Search::BaseAggregationComponent::InstanceMethods
  def aggregation(*args, &block); end
  def aggregations; end
  def method_missing(name, *args, &block); end
  def to_hash(options = T.unsafe(nil)); end
end

module Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods

  mixes_in_class_methods ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def initialize(*args, &block); end

  class << self
    def included(base); end
  end
end

module Elasticsearch::DSL::Search::BaseComponent::ClassMethods
  def name(value = T.unsafe(nil)); end
  def name=(value); end
  def option_methods; end
end

module Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  def call; end
  def empty?; end
  def name; end
  def to_hash(options = T.unsafe(nil)); end

  private

  def method_missing(name, *args, &block); end
end

module Elasticsearch::DSL::Search::BaseCompoundFilterComponent
  include ::Enumerable
  include ::Elasticsearch::DSL::Search::BaseCompoundFilterComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseCompoundFilterComponent::EnumerableMethods
  include ::Elasticsearch::DSL::Search::BaseCompoundFilterComponent::MethodDelegation

  def initialize(*args, &block); end

  class << self
    def included(base); end
  end
end

module Elasticsearch::DSL::Search::BaseCompoundFilterComponent::EnumerableMethods
  def <<(value); end
  def [](*args); end
  def each(&block); end
  def empty?; end
  def size; end
  def slice(*args); end
end

module Elasticsearch::DSL::Search::BaseCompoundFilterComponent::InstanceMethods
  def call; end
  def to_hash(options = T.unsafe(nil)); end
end

module Elasticsearch::DSL::Search::BaseCompoundFilterComponent::MethodDelegation
  def method_missing(name, *args, &block); end
end

class Elasticsearch::DSL::Search::Collapse
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def initialize(field, &block); end

  def inner_hits(name, &block); end
  def max_concurrent_group_searches(max); end
  def to_hash; end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Filter
  def initialize(*args, &block); end

  def call; end
  def method_missing(name, *args, &block); end
  def to_hash(options = T.unsafe(nil)); end
end

module Elasticsearch::DSL::Search::Filters; end

class Elasticsearch::DSL::Search::Filters::And
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Enumerable
  include ::Elasticsearch::DSL::Search::BaseCompoundFilterComponent
  include ::Elasticsearch::DSL::Search::BaseCompoundFilterComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseCompoundFilterComponent::EnumerableMethods
  include ::Elasticsearch::DSL::Search::BaseCompoundFilterComponent::MethodDelegation
  include ::Elasticsearch::DSL::Search::BaseComponent

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Filters::Bool
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def must(*args, &block); end
  def must_not(*args, &block); end
  def should(*args, &block); end
  def to_hash; end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Filters::Exists
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def field(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Filters::GeoBoundingBox
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def bottom(*args); end
  def bottom_left(*args); end
  def bottom_right(*args); end
  def left(*args); end
  def right(*args); end
  def top(*args); end
  def top_left(*args); end
  def top_right(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Filters::GeoDistance
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def initialize(*args, &block); end

  def distance(*args); end
  def distance_type(*args); end
  def lat(*args); end
  def lon(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Filters::GeoDistanceRange
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def lat(*args); end
  def lon(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Filters::GeoPolygon
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def points(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Filters::GeoShape
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def indexed_shape(*args); end
  def shape(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Filters::GeohashCell
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def initialize(*args, &block); end

  def lat(*args); end
  def lon(*args); end
  def neighbors(*args); end
  def precision(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Filters::HasChild
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def filter(*args, &block); end
  def inner_hits(*args); end
  def max_children(*args); end
  def min_children(*args); end
  def query(*args, &block); end
  def to_hash; end
  def type(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Filters::HasParent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def filter(*args, &block); end
  def inner_hits(*args); end
  def parent_type(*args); end
  def query(*args, &block); end
  def score_mode(*args); end
  def to_hash; end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Filters::Ids
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def type(*args); end
  def values(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Filters::Indices
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def filter(*args, &block); end
  def indices(*args); end
  def no_match_filter(*args, &block); end
  def to_hash; end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Filters::Limit
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def value(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Filters::MatchAll
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Filters::Missing
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def existence(*args); end
  def field(*args); end
  def null_value(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Filters::Nested
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def filter(*args, &block); end
  def path(*args); end
  def query(*args, &block); end
  def to_hash; end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Filters::Not
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def method_missing(name, *args, &block); end
  def to_hash(options = T.unsafe(nil)); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Filters::Or
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  include ::Enumerable
  include ::Elasticsearch::DSL::Search::BaseCompoundFilterComponent
  include ::Elasticsearch::DSL::Search::BaseCompoundFilterComponent::InstanceMethods
  include ::Elasticsearch::DSL::Search::BaseCompoundFilterComponent::EnumerableMethods
  include ::Elasticsearch::DSL::Search::BaseCompoundFilterComponent::MethodDelegation
  include ::Elasticsearch::DSL::Search::BaseComponent

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Filters::Prefix
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Filters::Query
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def initialize(*args, &block); end

  def to_hash; end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Filters::Range
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def boost(*args); end
  def format(*args); end
  def gt(*args); end
  def gte(*args); end
  def lt(*args); end
  def lte(*args); end
  def time_zone(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Filters::Regexp
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def flags(*args); end
  def value(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Filters::Script
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def params(*args); end
  def script(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Filters::Term
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Filters::Terms
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Filters::Type
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def value(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Highlight
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def initialize(*args, &block); end

  def encoder(value); end
  def encoder=(value); end
  def field(name, options = T.unsafe(nil)); end
  def fields(value_or_name); end
  def post_tags(*value); end
  def post_tags=(*value); end
  def pre_tags(*value); end
  def pre_tags=(*value); end
  def tags_schema(value); end
  def tags_schema=(value); end
  def to_hash; end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Options
  def initialize(*args, &block); end

  def _source(*args, &block); end
  def empty?; end
  def explain(*args, &block); end
  def fielddata_fields(*args, &block); end
  def fields(*args, &block); end
  def indices_boost(*args, &block); end
  def min_score(*args, &block); end
  def rescore(*args, &block); end
  def script_fields(*args, &block); end
  def source(*args, &block); end
  def to_hash(options = T.unsafe(nil)); end
  def track_scores(*args, &block); end
  def track_total_hits(*args, &block); end
  def version(*args, &block); end
end

Elasticsearch::DSL::Search::Options::DSL_METHODS = T.let(T.unsafe(nil), Array)
module Elasticsearch::DSL::Search::Queries; end

class Elasticsearch::DSL::Search::Queries::Bool
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def boost(*args); end
  def filter(*args, &block); end
  def minimum_should_match(*args); end
  def must(*args, &block); end
  def must_not(*args, &block); end
  def should(*args, &block); end
  def to_hash; end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Queries::Boosting
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def negative(*args); end
  def negative_boost(*args); end
  def positive(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Queries::Common
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def analyzer(*args); end
  def boost(*args); end
  def cutoff_frequency(*args); end
  def disable_coord(*args); end
  def low_freq_operator(*args); end
  def minimum_should_match(*args); end
  def query(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Queries::ConstantScore
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def boost(*args); end
  def filter(*args, &block); end
  def query(*args, &block); end
  def to_hash; end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Queries::DisMax
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def boost(*args); end
  def queries(*args); end
  def tie_breaker(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Queries::Exists
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def field(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Queries::Filtered
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def filter(*args, &block); end
  def query(*args, &block); end
  def strategy(*args); end
  def to_hash; end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Queries::FunctionScore
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def initialize(*args, &block); end

  def boost(*args); end
  def boost_mode(*args); end
  def filter(*args, &block); end
  def functions(value = T.unsafe(nil)); end
  def functions=(value); end
  def max_boost(*args); end
  def min_score(*args); end
  def query(*args, &block); end
  def score_mode(*args); end
  def script_score(*args); end
  def to_hash; end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Queries::Fuzzy
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def boost(*args); end
  def fuzziness(*args); end
  def max_expansions(*args); end
  def prefix_length(*args); end
  def value(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Queries::FuzzyLikeThis
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def analyzer(*args); end
  def boost(*args); end
  def fields(*args); end
  def fuzziness(*args); end
  def ignore_tf(*args); end
  def like_text(*args); end
  def max_query_terms(*args); end
  def prefix_length(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Queries::FuzzyLikeThisField
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def analyzer(*args); end
  def boost(*args); end
  def fuzziness(*args); end
  def ignore_tf(*args); end
  def like_text(*args); end
  def max_query_terms(*args); end
  def prefix_length(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Queries::GeoShape
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def indexed_shape(*args); end
  def shape(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Queries::HasChild
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def inner_hits(*args); end
  def max_children(*args); end
  def min_children(*args); end
  def query(*args, &block); end
  def score_mode(*args); end
  def to_hash; end
  def type(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Queries::HasParent
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def inner_hits(*args); end
  def parent_type(*args); end
  def query(*args, &block); end
  def score_mode(*args); end
  def to_hash; end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Queries::Ids
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def type(*args); end
  def values(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Queries::Indices
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def indices(*args); end
  def no_match_query(*args); end
  def query(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Queries::InnerHits
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def initialize(name = T.unsafe(nil), &block); end

  def from(from); end
  def size(size); end
  def sort(*args, &block); end
  def to_hash; end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Queries::Match
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def analyzer(*args); end
  def boost(*args); end
  def cutoff_frequency(*args); end
  def fuzziness(*args); end
  def fuzzy_rewrite(*args); end
  def lenient(*args); end
  def max_expansions(*args); end
  def minimum_should_match(*args); end
  def operator(*args); end
  def prefix_length(*args); end
  def query(*args); end
  def type(*args); end
  def zero_terms_query(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Queries::MatchAll
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def boost(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Queries::MatchPhrase
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def analyzer(*args); end
  def boost(*args); end
  def query(*args); end
  def slop(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Queries::MatchPhrasePrefix
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def boost(*args); end
  def max_expansions(*args); end
  def query(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Queries::MoreLikeThis
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def analyzer(*args); end
  def boost(*args); end
  def boost_terms(*args); end
  def docs(*args); end
  def exclude(*args); end
  def fields(*args); end
  def ids(*args); end
  def include(*args); end
  def like(*args); end
  def like_text(*args); end
  def max_doc_freq(*args); end
  def max_query_terms(*args); end
  def max_word_length(*args); end
  def min_doc_freq(*args); end
  def min_term_freq(*args); end
  def min_word_length(*args); end
  def percent_terms_to_match(*args); end
  def stop_words(*args); end
  def unlike(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Queries::MultiMatch
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def analyzer(*args); end
  def boost(*args); end
  def cutoff_frequency(*args); end
  def fields(*args); end
  def fuzziness(*args); end
  def max_expansions(*args); end
  def minimum_should_match(*args); end
  def operator(*args); end
  def prefix_length(*args); end
  def query(*args); end
  def rewrite(*args); end
  def slop(*args); end
  def type(*args); end
  def use_dis_max(*args); end
  def zero_terms_query(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Queries::Nested
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def inner_hits(*args); end
  def path(*args); end
  def query(*args, &block); end
  def score_mode(*args); end
  def to_hash; end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Queries::Prefix
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def boost(*args); end
  def value(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Queries::QueryString
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def allow_leading_wildcard(*args); end
  def analyze_wildcard(*args); end
  def analyzer(*args); end
  def auto_generate_phrase_queries(*args); end
  def boost(*args); end
  def default_field(*args); end
  def default_operator(*args); end
  def enable_position_increments(*args); end
  def fields(*args); end
  def fuzziness(*args); end
  def fuzzy_max_expansions(*args); end
  def fuzzy_prefix_length(*args); end
  def lenient(*args); end
  def locale(*args); end
  def lowercase_expanded_terms(*args); end
  def minimum_should_match(*args); end
  def phrase_slop(*args); end
  def query(*args); end
  def tie_breaker(*args); end
  def time_zone(*args); end
  def type(*args); end
  def use_dis_max(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Queries::Range
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def boost(*args); end
  def format(*args); end
  def gt(*args); end
  def gte(*args); end
  def lt(*args); end
  def lte(*args); end
  def time_zone(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Queries::Regexp
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def boost(*args); end
  def flags(*args); end
  def value(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Queries::SimpleQueryString
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def all_fields(*args); end
  def analyze_wildcard(*args); end
  def analyzer(*args); end
  def default_operator(*args); end
  def fields(*args); end
  def flags(*args); end
  def lenient(*args); end
  def minimum_should_match(*args); end
  def query(*args); end
  def quote_field_suffix(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Queries::SpanFirst
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def match(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Queries::SpanMulti
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def match(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Queries::SpanNear
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def collect_payloads(*args); end
  def in_order(*args); end
  def slop(*args); end
  def span_near(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Queries::SpanNot
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def dist(*args); end
  def exclude(*args); end
  def include(*args); end
  def post(*args); end
  def pre(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Queries::SpanOr
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def clauses(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Queries::SpanTerm
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Queries::Template
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def params(*args); end
  def query(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Queries::Term
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Queries::Terms
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Queries::TopChildren
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def _scope(*args); end
  def factor(*args); end
  def incremental_factor(*args); end
  def query(*args, &block); end
  def score(*args); end
  def to_hash; end
  def type(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Queries::Wildcard
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def boost(*args); end
  def value(*args); end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Query
  def initialize(*args, &block); end

  def call; end
  def method_missing(name, *args, &block); end
  def to_hash(options = T.unsafe(nil)); end
end

class Elasticsearch::DSL::Search::Search
  def initialize(*args, &block); end

  def aggregation(*args, &block); end
  def aggregations; end
  def aggregations=(value); end
  def collapse(*args, &block); end
  def filter(*args, &block); end
  def filter=(value); end
  def from(value = T.unsafe(nil)); end
  def from=(value = T.unsafe(nil)); end
  def highlight(*args, &block); end
  def method_missing(name, *args, &block); end
  def post_filter(*args, &block); end
  def post_filter=(value); end
  def query(*args, &block); end
  def query=(value); end
  def size(value = T.unsafe(nil)); end
  def size=(value = T.unsafe(nil)); end
  def sort(*args, &block); end
  def sort=(value); end
  def stored_fields(value = T.unsafe(nil)); end
  def stored_fields=(value = T.unsafe(nil)); end
  def suggest(*args, &block); end
  def suggest=(value); end
  def to_hash; end
end

class Elasticsearch::DSL::Search::Sort
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def initialize(*args, &block); end

  def by(name, direction = T.unsafe(nil)); end
  def empty?; end
  def to_hash; end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

class Elasticsearch::DSL::Search::Suggest
  include ::Elasticsearch::DSL::Search::BaseComponent
  include ::Elasticsearch::DSL::Search::BaseComponent::InstanceMethods
  extend ::Elasticsearch::DSL::Search::BaseComponent::ClassMethods

  def initialize(key, options = T.unsafe(nil), &block); end

  def to_hash; end

  class << self
    def option_method(name, block = T.unsafe(nil)); end
  end
end

module Elasticsearch::DSL::Utils
  extend ::Elasticsearch::DSL::Utils

  def __camelize(string); end
end

Elasticsearch::DSL::VERSION = T.let(T.unsafe(nil), String)
Elasticsearch::VERSION = T.let(T.unsafe(nil), String)
